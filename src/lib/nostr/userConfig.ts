/**
 * ============================================
 * NIP-17 User Config System
 * ============================================
 * 
 * Speichert User-Konfiguration verschl√ºsselt auf Nostr-Relays
 * - Admin-Status
 * - Gruppen-Secret
 * - Einladungslink
 * - Admin-Pubkey
 * 
 * Verwendet NIP-17 (Gift-Wrapped Messages) f√ºr maximale Privatsph√§re
 * localStorage dient als Fallback wenn Relay nicht erreichbar
 */

import { finalizeEvent, getPublicKey } from 'nostr-tools';
import { createNIP17Message, decryptNIP17Message } from './crypto';
import { fetchEvents, publishEvent } from './client';
import type { NostrEvent, NostrFilter } from './types';

/**
 * User-Konfiguration
 */
export interface UserConfig {
  is_group_admin: boolean;
  admin_pubkey: string;
  group_secret: string;
  invite_link?: string;
  relay: string;
  created_at: number;
  updated_at: number;
}

/**
 * Speichere User-Config verschl√ºsselt auf Nostr (NIP-17)
 * 
 * @param config - User-Konfiguration
 * @param privateKey - User's Private Key (hex)
 * @param relays - Relays zum Speichern
 * @returns Event-ID
 */
export async function saveUserConfig(
  config: UserConfig,
  privateKey: string,
  relays: string[]
): Promise<string> {
  try {
    console.log('üíæ [USER-CONFIG] Speichere Config auf Nostr...');
    console.log('  üì° Relays:', relays);
    
    const pubkey = getPublicKey(privateKey as any);
    
    // Erstelle Config-Objekt mit Timestamp
    const configData: UserConfig = {
      ...config,
      updated_at: Math.floor(Date.now() / 1000)
    };
    
    console.log('  üìã Config-Daten:', {
      is_admin: configData.is_group_admin,
      has_secret: !!configData.group_secret,
      has_link: !!configData.invite_link
    });
    
    // Verschl√ºssele Config mit NIP-17 (zu sich selbst)
    const configJson = JSON.stringify(configData);
    const { wrappedEvent } = await createNIP17Message(
      configJson,
      pubkey,  // Recipient = Self (zu sich selbst verschl√ºsselt!)
      privateKey
    );
    
    console.log('  üîê Config verschl√ºsselt mit NIP-17');
    
    // Erstelle Replaceable Event (Kind 30078 - Application Data)
    // Damit wird alte Config automatisch ersetzt
    const event = {
      kind: 30078,  // Parameterized Replaceable Event
      created_at: Math.floor(Date.now() / 1000),
      tags: [
        ['d', 'bitcoin-swap-user-config'],  // Identifier f√ºr Replaceable Event
        ['encrypted', 'nip17'],              // Markierung f√ºr Verschl√ºsselung
        ['app', 'bitcoin-swap-network']      // App-Identifier
      ],
      content: wrappedEvent.content,  // NIP-17 verschl√ºsselter Content
      pubkey: pubkey
    };
    
    const signedEvent = finalizeEvent(event, privateKey as any);
    
    console.log('  ‚úÖ Event erstellt (Kind 30078)');
    console.log('  üÜî Event-ID:', signedEvent.id.substring(0, 16) + '...');
    
    // Publiziere zu Relays
    const result = await publishEvent(signedEvent as NostrEvent, relays);
    
    if (!result.success) {
      throw new Error('‚ùå Relay nicht erreichbar. Bitte pr√ºfe deine Internetverbindung und versuche es erneut.');
    }
    
    console.log('  ‚úÖ Config gespeichert auf', result.relays.length, 'Relays');
    
    return signedEvent.id;
  } catch (error) {
    console.error('‚ùå [USER-CONFIG] Fehler beim Speichern:', error);
    
    // Werfe Fehler weiter - KEIN localStorage-Fallback!
    if (error instanceof Error) {
      throw error;
    }
    throw new Error('‚ùå Relay nicht erreichbar. Bitte pr√ºfe deine Internetverbindung und versuche es erneut.');
  }
}

/**
 * Lade User-Config von Nostr (NIP-17)
 * 
 * @param privateKey - User's Private Key (hex)
 * @param relays - Relays zum Laden
 * @returns User-Config oder null
 */
export async function loadUserConfig(
  privateKey: string,
  relays: string[]
): Promise<UserConfig | null> {
  try {
    console.log('üì• [USER-CONFIG] Lade Config von Nostr...');
    console.log('  üì° Relays:', relays);
    
    const pubkey = getPublicKey(privateKey as any);
    
    // Suche nach User's Config Event (Kind 30078)
    const filter: NostrFilter = {
      kinds: [30078],
      authors: [pubkey],
      '#d': ['bitcoin-swap-user-config'],
      limit: 1
    };
    
    console.log('  üîç Suche Config-Event...');
    
    const events = await fetchEvents(relays, filter, 5000);
    
    if (events.length === 0) {
      console.log('  ‚ö†Ô∏è Keine Config auf Relay gefunden');
      return null;
    }
    
    // Nehme neuestes Event
    const latestEvent = events.sort((a, b) => b.created_at - a.created_at)[0];
    
    console.log('  ‚úÖ Config-Event gefunden:', latestEvent.id.substring(0, 16) + '...');
    console.log('  üìÖ Erstellt:', new Date(latestEvent.created_at * 1000).toLocaleString());
    
    // Entschl√ºssele mit NIP-17
    try {
      // Erstelle tempor√§res wrapped Event f√ºr Entschl√ºsselung
      const wrappedEvent = {
        ...latestEvent,
        kind: 1059  // Gift-Wrapped Event
      };
      
      const decrypted = await decryptNIP17Message(wrappedEvent, privateKey);
      const config: UserConfig = JSON.parse(decrypted.content);
      
      console.log('  üîì Config entschl√ºsselt');
      console.log('  ‚úÖ Config geladen:', {
        is_admin: config.is_group_admin,
        has_secret: !!config.group_secret,
        has_link: !!config.invite_link
      });
      
      return config;
    } catch (decryptError) {
      console.error('  ‚ùå Entschl√ºsselung fehlgeschlagen:', decryptError);
      throw new Error('‚ùå Config konnte nicht entschl√ºsselt werden. Bitte pr√ºfe deinen Private Key.');
    }
  } catch (error) {
    console.error('‚ùå [USER-CONFIG] Fehler beim Laden:', error);
    
    // Werfe Fehler weiter - KEIN localStorage-Fallback!
    if (error instanceof Error) {
      throw error;
    }
    throw new Error('‚ùå Relay nicht erreichbar. Bitte pr√ºfe deine Internetverbindung und versuche es erneut.');
  }
}

/**
 * L√∂sche User-Config (von Nostr und localStorage)
 * 
 * @param privateKey - User's Private Key (hex)
 * @param relays - Relays
 */
export async function deleteUserConfig(
  privateKey: string,
  relays: string[]
): Promise<void> {
  try {
    console.log('üóëÔ∏è [USER-CONFIG] L√∂sche Config...');
    
    const pubkey = getPublicKey(privateKey as any);
    
    // Suche Config-Event
    const filter: NostrFilter = {
      kinds: [30078],
      authors: [pubkey],
      '#d': ['bitcoin-swap-user-config'],
      limit: 1
    };
    
    const events = await fetchEvents(relays, filter, 5000);
    
    if (events.length > 0) {
      const configEvent = events[0];
      
      // Erstelle Delete-Event (Kind 5)
      const deleteEvent = {
        kind: 5,
        created_at: Math.floor(Date.now() / 1000),
        tags: [
          ['e', configEvent.id],
          ['k', '30078']
        ],
        content: 'User-Config gel√∂scht',
        pubkey: pubkey
      };
      
      const signedDelete = finalizeEvent(deleteEvent, privateKey as any);
      await publishEvent(signedDelete as NostrEvent, relays);
      
      console.log('  ‚úÖ Config-Event gel√∂scht von Relay');
    }
    
    console.log('  ‚úÖ Config gel√∂scht');
  } catch (error) {
    console.error('‚ùå [USER-CONFIG] Fehler beim L√∂schen:', error);
    throw new Error('‚ùå Relay nicht erreichbar. Config konnte nicht gel√∂scht werden.');
  }
}

/**
 * Pr√ºfe ob User-Config existiert
 * 
 * @param privateKey - User's Private Key (hex)
 * @param relays - Relays
 * @returns true wenn Config existiert
 */
export async function hasUserConfig(
  privateKey: string,
  relays: string[]
): Promise<boolean> {
  try {
    const config = await loadUserConfig(privateKey, relays);
    return config !== null;
  } catch (error) {
    return false;
  }
}

/**
 * Migriere localStorage-Daten zu Nostr
 * Wird beim ersten Login nach Update aufgerufen
 */
export async function migrateLocalStorageToNostr(
  privateKey: string,
  relays: string[]
): Promise<boolean> {
  try {
    console.log('üîÑ [MIGRATION] Migriere localStorage zu Nostr...');
    
    // Pr√ºfe ob bereits auf Nostr
    try {
      const existingConfig = await loadUserConfig(privateKey, relays);
      if (existingConfig) {
        console.log('  ‚úÖ Config bereits auf Nostr, keine Migration n√∂tig');
        return true;
      }
    } catch (error) {
      // Config existiert nicht auf Nostr, fahre mit Migration fort
      console.log('  ‚ÑπÔ∏è Keine Config auf Nostr gefunden, starte Migration...');
    }
    
    // Lade aus localStorage
    const isAdmin = localStorage.getItem('is_group_admin') === 'true';
    const adminPubkey = localStorage.getItem('admin_pubkey');
    const groupSecret = localStorage.getItem('group_secret');
    const inviteLink = localStorage.getItem('invite_link');
    
    if (!adminPubkey || !groupSecret) {
      console.log('  ‚ö†Ô∏è Keine vollst√§ndigen Daten in localStorage');
      return false;
    }
    
    // Erstelle Config
    const config: UserConfig = {
      is_group_admin: isAdmin,
      admin_pubkey: adminPubkey,
      group_secret: groupSecret,
      invite_link: inviteLink || undefined,
      relay: relays[0],
      created_at: Math.floor(Date.now() / 1000),
      updated_at: Math.floor(Date.now() / 1000)
    };
    
    // Speichere auf Nostr
    await saveUserConfig(config, privateKey, relays);
    
    console.log('  ‚úÖ Migration erfolgreich');
    return true;
  } catch (error) {
    console.error('‚ùå [MIGRATION] Fehler:', error);
    throw new Error('‚ùå Migration fehlgeschlagen. Relay nicht erreichbar.');
  }
}