/**
 * Interesse-Signal Management
 * 
 * Dieses Modul verwaltet verschl√ºsselte Interesse-Signale f√ºr Marketplace-Angebote.
 * Statt sofort NIP-17 DMs zu senden, werden verschl√ºsselte Signale erstellt,
 * die nur der Anbieter (mit seinem Angebots-Secret) entschl√ºsseln kann.
 * 
 * Vorteile:
 * - Privatsph√§re: Andere Gruppenmitglieder sehen KEINE Interessenten
 * - Effizienz: Nur EINE DM wird erstellt (mit ausgew√§hltem Partner)
 * - Kontrolle: Anbieter sieht alle Interessenten und w√§hlt aus
 */

import { getPublicKey } from 'nostr-tools';
import * as nip04 from 'nostr-tools/nip04';
import type { NostrEvent, NostrFilter } from './types';
import { createEvent, publishEvent, fetchEvents } from './client';
import { GROUP_TAG } from '$lib/config';

/**
 * Interface f√ºr Interesse-Signal
 */
export interface InterestSignal {
  offerId: string;
  interestedPubkey: string;
  timestamp: number;
  message?: string;
  userName?: string;
}

/**
 * Interface f√ºr entschl√ºsseltes Interesse-Signal mit Event-Metadaten
 */
export interface DecryptedInterestSignal extends InterestSignal {
  eventId: string;
  createdAt: number;
}

/**
 * Sende Interesse-Signal (verschl√ºsselt)
 * 
 * Erstellt ein verschl√ºsseltes Event (Kind 30078), das nur der Anbieter
 * mit seinem Angebots-Private-Key entschl√ºsseln kann.
 * 
 * @param offerId - ID des Angebots
 * @param offerPublicKey - Public Key des Angebots (aus Secret abgeleitet)
 * @param message - Optional: Nachricht an Anbieter
 * @param userName - Optional: Name des Interessenten
 * @param userPrivateKey - Private Key des Interessenten
 * @param relay - Relay-URL
 * @returns Erstelltes Event
 * 
 * @example
 * await sendInterestSignal(
 *   offerId,
 *   offerPubkey,
 *   "Ich h√§tte Interesse!",
 *   "Alice",
 *   userPrivateKey,
 *   relay
 * );
 */
export async function sendInterestSignal(
  offerId: string,
  offerPublicKey: string,
  message: string,
  userName: string,
  userPrivateKey: string,
  relay: string
): Promise<NostrEvent> {
  console.log('üíå [INTEREST-SIGNAL] Sende verschl√ºsseltes Interesse-Signal...');
  console.log('  üìã Offer-ID:', offerId.substring(0, 16) + '...');
  console.log('  üë§ User:', userName);

  const userPubkey = getPublicKey(userPrivateKey as any);

  // Erstelle Signal-Daten
  const signal: InterestSignal = {
    offerId,
    interestedPubkey: userPubkey,
    timestamp: Date.now(),
    message,
    userName
  };

  // Verschl√ºssele mit Anbieter-Pubkey (NIP-04)
  // Nur Anbieter mit seinem Private Key kann entschl√ºsseln
  const encrypted = await nip04.encrypt(
    userPrivateKey as any,
    offerPublicKey,
    JSON.stringify(signal)
  );

  console.log('  üîê Signal verschl√ºsselt (nur Anbieter kann lesen)');

  // Erstelle Event (Kind 30078 = Addressable Event)
  const tags = [
    ['d', `interest-${offerId}-${userPubkey}`], // Unique identifier
    ['e', offerId, '', 'reply'],                 // Referenz zum Angebot
    ['t', 'bitcoin-interest'],                   // Tag f√ºr Filtering
    ['t', GROUP_TAG]                             // Gruppen-Tag
    // ‚ùå KEIN 'p' Tag mit Anbieter-Pubkey! (Privatsph√§re)
  ];

  const event = await createEvent(30078, encrypted, tags, userPrivateKey);
  const result = await publishEvent(event, [relay]);

  console.log('  ‚úÖ Interesse-Signal gesendet:', result.relays.length + '/' + 1 + ' Relays');

  return event;
}

/**
 * Lade Interesse-Signale f√ºr Angebot (nur Anbieter)
 * 
 * L√§dt alle verschl√ºsselten Interesse-Signale f√ºr ein Angebot und
 * entschl√ºsselt sie mit dem Angebots-Private-Key.
 * 
 * @param offerId - ID des Angebots
 * @param offerPrivateKey - Private Key des Angebots (aus Secret abgeleitet)
 * @param relay - Relay-URL
 * @returns Array von entschl√ºsselten Interesse-Signalen
 * 
 * @example
 * const interests = await loadInterestSignals(offerId, offerPrivateKey, relay);
 * console.log(`${interests.length} Interessenten gefunden`);
 */
export async function loadInterestSignals(
  offerId: string,
  offerPrivateKey: string,
  relay: string
): Promise<DecryptedInterestSignal[]> {
  console.log('üíå [INTEREST-SIGNALS] Lade Interesse-Signale...');
  console.log('  üìã Offer-ID:', offerId.substring(0, 16) + '...');

  // Filter f√ºr Interesse-Signale
  const filter: NostrFilter = {
    kinds: [30078],
    '#e': [offerId],
    '#t': ['bitcoin-interest']
  };

  const events = await fetchEvents([relay], filter);
  console.log('  üì¶ Gefundene Events:', events.length);

  // Entschl√ºssele mit Angebots-Private-Key
  const signals: DecryptedInterestSignal[] = [];

  for (const event of events) {
    try {
      // Entschl√ºssele Content
      const decrypted = await nip04.decrypt(
        offerPrivateKey as any,
        event.pubkey,
        event.content
      );

      const signal: InterestSignal = JSON.parse(decrypted);

      // F√ºge Event-Metadaten hinzu
      signals.push({
        ...signal,
        eventId: event.id,
        createdAt: event.created_at
      });

      console.log('  ‚úÖ Signal entschl√ºsselt:', signal.userName || signal.interestedPubkey.substring(0, 16) + '...');
    } catch (error) {
      console.warn('  ‚ö†Ô∏è Entschl√ºsselung fehlgeschlagen f√ºr Event:', event.id.substring(0, 16) + '...');
      // Ignoriere Events die nicht entschl√ºsselt werden k√∂nnen
    }
  }

  console.log('  üìä Entschl√ºsselte Signale:', signals.length);

  // Sortiere nach Timestamp (neueste zuerst)
  signals.sort((a, b) => b.timestamp - a.timestamp);

  return signals;
}

/**
 * L√∂sche Interesse-Signal
 * 
 * L√∂scht ein Interesse-Signal vom Relay (NIP-09).
 * Nur der Ersteller kann sein eigenes Signal l√∂schen.
 * 
 * @param eventId - ID des zu l√∂schenden Events
 * @param userPrivateKey - Private Key des Interessenten
 * @param relay - Relay-URL
 * @param reason - Optional: Grund f√ºr L√∂schung
 * 
 * @example
 * await deleteInterestSignal(eventId, userPrivateKey, relay, "Interesse zur√ºckgezogen");
 */
export async function deleteInterestSignal(
  eventId: string,
  userPrivateKey: string,
  relay: string,
  reason?: string
): Promise<void> {
  console.log('üóëÔ∏è [INTEREST-SIGNAL] L√∂sche Interesse-Signal...');
  console.log('  üÜî Event-ID:', eventId.substring(0, 16) + '...');

  const tags = [['e', eventId]];
  const content = reason || 'Interesse zur√ºckgezogen';

  const deleteEvent = await createEvent(5, content, tags, userPrivateKey);
  await publishEvent(deleteEvent, [relay]);

  console.log('  ‚úÖ Interesse-Signal gel√∂scht');
}

/**
 * Pr√ºfe ob User bereits Interesse gezeigt hat
 * 
 * @param offerId - ID des Angebots
 * @param userPubkey - Public Key des Users
 * @param relay - Relay-URL
 * @returns true wenn User bereits Interesse gezeigt hat
 * 
 * @example
 * const hasInterest = await hasUserShownInterest(offerId, userPubkey, relay);
 * if (hasInterest) {
 *   console.log("Du hast bereits Interesse gezeigt");
 * }
 */
export async function hasUserShownInterest(
  offerId: string,
  userPubkey: string,
  relay: string
): Promise<boolean> {
  const filter: NostrFilter = {
    kinds: [30078],
    authors: [userPubkey],
    '#e': [offerId],
    '#t': ['bitcoin-interest'],
    limit: 1
  };

  const events = await fetchEvents([relay], filter);
  return events.length > 0;
}

/**
 * Z√§hle Anzahl der Interessenten f√ºr Angebot
 * 
 * Gibt nur die Anzahl zur√ºck, ohne zu entschl√ºsseln.
 * N√ºtzlich f√ºr UI-Anzeige "3 Interessenten".
 * 
 * @param offerId - ID des Angebots
 * @param relay - Relay-URL
 * @returns Anzahl der Interesse-Signale
 * 
 * @example
 * const count = await countInterestSignals(offerId, relay);
 * console.log(`${count} Interessenten`);
 */
export async function countInterestSignals(
  offerId: string,
  relay: string
): Promise<number> {
  const filter: NostrFilter = {
    kinds: [30078],
    '#e': [offerId],
    '#t': ['bitcoin-interest']
  };

  const events = await fetchEvents([relay], filter);
  return events.length;
}

/**
 * Lade eigene Interesse-Signale
 * 
 * L√§dt alle Interesse-Signale die der User selbst gesendet hat.
 * N√ºtzlich f√ºr "Meine Interessen" √úbersicht.
 * 
 * @param userPubkey - Public Key des Users
 * @param relay - Relay-URL
 * @returns Array von Event-IDs und Offer-IDs
 * 
 * @example
 * const myInterests = await loadMyInterestSignals(userPubkey, relay);
 * console.log(`Du hast ${myInterests.length} Interessen gezeigt`);
 */
export async function loadMyInterestSignals(
  userPubkey: string,
  relay: string
): Promise<Array<{ eventId: string; offerId: string; timestamp: number }>> {
  const filter: NostrFilter = {
    kinds: [30078],
    authors: [userPubkey],
    '#t': ['bitcoin-interest'],
    limit: 100
  };

  const events = await fetchEvents([relay], filter);

  return events.map(event => {
    const offerTag = event.tags.find(t => t[0] === 'e' && t[3] === 'reply');
    return {
      eventId: event.id,
      offerId: offerTag ? offerTag[1] : '',
      timestamp: event.created_at
    };
  }).filter(i => i.offerId !== '');
}